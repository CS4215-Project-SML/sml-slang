// Generated from ./src/lang/sml.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { CharStream } from 'antlr4ts/CharStream'
import { NotNull } from 'antlr4ts/Decorators'
import { Override } from 'antlr4ts/Decorators'
import { Lexer } from 'antlr4ts/Lexer'
import * as Utils from 'antlr4ts/misc/Utils'
import { RuleContext } from 'antlr4ts/RuleContext'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

export class smlLexer extends Lexer {
  public static readonly T__0 = 1
  public static readonly T__1 = 2
  public static readonly T__2 = 3
  public static readonly T__3 = 4
  public static readonly T__4 = 5
  public static readonly T__5 = 6
  public static readonly T__6 = 7
  public static readonly T__7 = 8
  public static readonly T__8 = 9
  public static readonly T__9 = 10
  public static readonly T__10 = 11
  public static readonly T__11 = 12
  public static readonly T__12 = 13
  public static readonly T__13 = 14
  public static readonly T__14 = 15
  public static readonly T__15 = 16
  public static readonly T__16 = 17
  public static readonly T__17 = 18
  public static readonly T__18 = 19
  public static readonly T__19 = 20
  public static readonly T__20 = 21
  public static readonly T__21 = 22
  public static readonly T__22 = 23
  public static readonly T__23 = 24
  public static readonly CHAR = 25
  public static readonly STR = 26
  public static readonly BOOL = 27
  public static readonly REAL = 28
  public static readonly INT = 29
  public static readonly ABSTYPE = 30
  public static readonly AND = 31
  public static readonly ANDALSO = 32
  public static readonly AS = 33
  public static readonly CASE = 34
  public static readonly DATATYPE = 35
  public static readonly DO = 36
  public static readonly ELSE = 37
  public static readonly END = 38
  public static readonly EXCEPTION = 39
  public static readonly FN = 40
  public static readonly FUN = 41
  public static readonly HANDLE = 42
  public static readonly IF = 43
  public static readonly IN = 44
  public static readonly INFIX = 45
  public static readonly INFIXR = 46
  public static readonly LET = 47
  public static readonly LOCAL = 48
  public static readonly NONFIX = 49
  public static readonly OF = 50
  public static readonly OP = 51
  public static readonly OPEN = 52
  public static readonly ORELSE = 53
  public static readonly RAISE = 54
  public static readonly REC = 55
  public static readonly THEN = 56
  public static readonly TYPE = 57
  public static readonly VAL = 58
  public static readonly WITH = 59
  public static readonly WITHTYPE = 60
  public static readonly WHILE = 61
  public static readonly TRUE = 62
  public static readonly FALSE = 63
  public static readonly DIGIT = 64
  public static readonly LETTER = 65
  public static readonly NEWLINE = 66
  public static readonly WHITESPACE = 67

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'T__6',
    'T__7',
    'T__8',
    'T__9',
    'T__10',
    'T__11',
    'T__12',
    'T__13',
    'T__14',
    'T__15',
    'T__16',
    'T__17',
    'T__18',
    'T__19',
    'T__20',
    'T__21',
    'T__22',
    'T__23',
    'CHAR',
    'STR',
    'BOOL',
    'REAL',
    'INT',
    'ABSTYPE',
    'AND',
    'ANDALSO',
    'AS',
    'CASE',
    'DATATYPE',
    'DO',
    'ELSE',
    'END',
    'EXCEPTION',
    'FN',
    'FUN',
    'HANDLE',
    'IF',
    'IN',
    'INFIX',
    'INFIXR',
    'LET',
    'LOCAL',
    'NONFIX',
    'OF',
    'OP',
    'OPEN',
    'ORELSE',
    'RAISE',
    'REC',
    'THEN',
    'TYPE',
    'VAL',
    'WITH',
    'WITHTYPE',
    'WHILE',
    'TRUE',
    'FALSE',
    'DIGIT',
    'LETTER',
    'NEWLINE',
    'WHITESPACE'
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "';'",
    "'='",
    "'('",
    "')'",
    "'''",
    "'_'",
    "'!'",
    "'%'",
    "'&'",
    "'$'",
    "'#'",
    "'+'",
    "'-'",
    "'/'",
    "':'",
    "'<'",
    "'>'",
    "'?'",
    "'@'",
    "'\\'",
    "'~'",
    "'^'",
    "'|'",
    "'*'",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "'abstype'",
    "'and'",
    "'andalso'",
    "'as'",
    "'case'",
    "'datatype'",
    "'do'",
    "'else'",
    "'end'",
    "'exception'",
    "'fn'",
    "'fun'",
    "'handle'",
    "'if'",
    "'in'",
    "'infix'",
    "'infixr'",
    "'let'",
    "'local'",
    "'nonfix'",
    "'of'",
    "'op'",
    "'open'",
    "'orelse'",
    "'raise'",
    "'rec'",
    "'then'",
    "'type'",
    "'val'",
    "'with'",
    "'withtype'",
    "'while'",
    "'true'",
    "'false'"
  ]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    'CHAR',
    'STR',
    'BOOL',
    'REAL',
    'INT',
    'ABSTYPE',
    'AND',
    'ANDALSO',
    'AS',
    'CASE',
    'DATATYPE',
    'DO',
    'ELSE',
    'END',
    'EXCEPTION',
    'FN',
    'FUN',
    'HANDLE',
    'IF',
    'IN',
    'INFIX',
    'INFIXR',
    'LET',
    'LOCAL',
    'NONFIX',
    'OF',
    'OP',
    'OPEN',
    'ORELSE',
    'RAISE',
    'REC',
    'THEN',
    'TYPE',
    'VAL',
    'WITH',
    'WITHTYPE',
    'WHILE',
    'TRUE',
    'FALSE',
    'DIGIT',
    'LETTER',
    'NEWLINE',
    'WHITESPACE'
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    smlLexer._LITERAL_NAMES,
    smlLexer._SYMBOLIC_NAMES,
    []
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return smlLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(smlLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'sml.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return smlLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return smlLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return smlLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return smlLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02E\u01AA\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    "\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04" +
    '+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04' +
    '4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04' +
    '=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x03\x02\x03' +
    '\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03' +
    '\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03' +
    '\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11' +
    '\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15' +
    '\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A' +
    '\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x05\x1A\xC0\n\x1A\x03\x1A\x03' +
    '\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x07\x1B\xC8\n\x1B\f\x1B\x0E\x1B\xCB' +
    '\v\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x05\x1C\xD1\n\x1C\x03\x1D\x06\x1D' +
    '\xD4\n\x1D\r\x1D\x0E\x1D\xD5\x03\x1D\x03\x1D\x06\x1D\xDA\n\x1D\r\x1D\x0E' +
    '\x1D\xDB\x03\x1E\x06\x1E\xDF\n\x1E\r\x1E\x0E\x1E\xE0\x03\x1F\x03\x1F\x03' +
    '\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03 \x03!' +
    '\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03"\x03"\x03"\x03#\x03#\x03#\x03' +
    '#\x03#\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03%\x03%\x03%\x03' +
    "&\x03&\x03&\x03&\x03&\x03'\x03'\x03'\x03'\x03(\x03(\x03(\x03(\x03" +
    '(\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03*\x03*\x03*\x03*\x03+\x03' +
    '+\x03+\x03+\x03+\x03+\x03+\x03,\x03,\x03,\x03-\x03-\x03-\x03.\x03.\x03' +
    '.\x03.\x03.\x03.\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x030\x030\x030\x03' +
    '0\x031\x031\x031\x031\x031\x031\x032\x032\x032\x032\x032\x032\x032\x03' +
    '3\x033\x033\x034\x034\x034\x035\x035\x035\x035\x035\x036\x036\x036\x03' +
    '6\x036\x036\x036\x037\x037\x037\x037\x037\x037\x038\x038\x038\x038\x03' +
    '9\x039\x039\x039\x039\x03:\x03:\x03:\x03:\x03:\x03;\x03;\x03;\x03;\x03' +
    '<\x03<\x03<\x03<\x03<\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03' +
    '>\x03>\x03>\x03>\x03>\x03>\x03?\x03?\x03?\x03?\x03?\x03@\x03@\x03@\x03' +
    '@\x03@\x03@\x03A\x03A\x03B\x03B\x03C\x05C\u019E\nC\x03C\x03C\x05C\u01A2' +
    '\nC\x03D\x06D\u01A5\nD\rD\x0ED\u01A6\x03D\x03D\x02\x02\x02E\x03\x02\x03' +
    '\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02' +
    '\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F' +
    "\x02\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18" +
    '/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ' +
    '?\x02!A\x02"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+U' +
    '\x02,W\x02-Y\x02.[\x02/]\x020_\x021a\x022c\x023e\x024g\x025i\x026k\x02' +
    '7m\x028o\x029q\x02:s\x02;u\x02<w\x02=y\x02>{\x02?}\x02@\x7F\x02A\x81\x02' +
    'B\x83\x02C\x85\x02D\x87\x02E\x03\x02\x05\x03\x022;\x04\x02C\\c|\x04\x02' +
    '\v\v""\x02\u01B5\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02' +
    '\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r' +
    '\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13' +
    '\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19' +
    '\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F' +
    '\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02' +
    "\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02" +
    '\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03' +
    '\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02' +
    '\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02' +
    'A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02' +
    '\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02' +
    '\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03' +
    '\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02' +
    '\x02\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02' +
    'c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x02i\x03\x02' +
    '\x02\x02\x02k\x03\x02\x02\x02\x02m\x03\x02\x02\x02\x02o\x03\x02\x02\x02' +
    '\x02q\x03\x02\x02\x02\x02s\x03\x02\x02\x02\x02u\x03\x02\x02\x02\x02w\x03' +
    '\x02\x02\x02\x02y\x03\x02\x02\x02\x02{\x03\x02\x02\x02\x02}\x03\x02\x02' +
    '\x02\x02\x7F\x03\x02\x02\x02\x02\x81\x03\x02\x02\x02\x02\x83\x03\x02\x02' +
    '\x02\x02\x85\x03\x02\x02\x02\x02\x87\x03\x02\x02\x02\x03\x89\x03\x02\x02' +
    '\x02\x05\x8B\x03\x02\x02\x02\x07\x8D\x03\x02\x02\x02\t\x8F\x03\x02\x02' +
    '\x02\v\x91\x03\x02\x02\x02\r\x93\x03\x02\x02\x02\x0F\x95\x03\x02\x02\x02' +
    '\x11\x97\x03\x02\x02\x02\x13\x99\x03\x02\x02\x02\x15\x9B\x03\x02\x02\x02' +
    '\x17\x9D\x03\x02\x02\x02\x19\x9F\x03\x02\x02\x02\x1B\xA1\x03\x02\x02\x02' +
    '\x1D\xA3\x03\x02\x02\x02\x1F\xA5\x03\x02\x02\x02!\xA7\x03\x02\x02\x02' +
    "#\xA9\x03\x02\x02\x02%\xAB\x03\x02\x02\x02'\xAD\x03\x02\x02\x02)\xAF" +
    '\x03\x02\x02\x02+\xB1\x03\x02\x02\x02-\xB3\x03\x02\x02\x02/\xB5\x03\x02' +
    '\x02\x021\xB7\x03\x02\x02\x023\xB9\x03\x02\x02\x025\xC3\x03\x02\x02\x02' +
    '7\xD0\x03\x02\x02\x029\xD3\x03\x02\x02\x02;\xDE\x03\x02\x02\x02=\xE2\x03' +
    '\x02\x02\x02?\xEA\x03\x02\x02\x02A\xEE\x03\x02\x02\x02C\xF6\x03\x02\x02' +
    '\x02E\xF9\x03\x02\x02\x02G\xFE\x03\x02\x02\x02I\u0107\x03\x02\x02\x02' +
    'K\u010A\x03\x02\x02\x02M\u010F\x03\x02\x02\x02O\u0113\x03\x02\x02\x02' +
    'Q\u011D\x03\x02\x02\x02S\u0120\x03\x02\x02\x02U\u0124\x03\x02\x02\x02' +
    'W\u012B\x03\x02\x02\x02Y\u012E\x03\x02\x02\x02[\u0131\x03\x02\x02\x02' +
    ']\u0137\x03\x02\x02\x02_\u013E\x03\x02\x02\x02a\u0142\x03\x02\x02\x02' +
    'c\u0148\x03\x02\x02\x02e\u014F\x03\x02\x02\x02g\u0152\x03\x02\x02\x02' +
    'i\u0155\x03\x02\x02\x02k\u015A\x03\x02\x02\x02m\u0161\x03\x02\x02\x02' +
    'o\u0167\x03\x02\x02\x02q\u016B\x03\x02\x02\x02s\u0170\x03\x02\x02\x02' +
    'u\u0175\x03\x02\x02\x02w\u0179\x03\x02\x02\x02y\u017E\x03\x02\x02\x02' +
    '{\u0187\x03\x02\x02\x02}\u018D\x03\x02\x02\x02\x7F\u0192\x03\x02\x02\x02' +
    '\x81\u0198\x03\x02\x02\x02\x83\u019A\x03\x02\x02\x02\x85\u01A1\x03\x02' +
    '\x02\x02\x87\u01A4\x03\x02\x02\x02\x89\x8A\x07=\x02\x02\x8A\x04\x03\x02' +
    '\x02\x02\x8B\x8C\x07?\x02\x02\x8C\x06\x03\x02\x02\x02\x8D\x8E\x07*\x02' +
    '\x02\x8E\b\x03\x02\x02\x02\x8F\x90\x07+\x02\x02\x90\n\x03\x02\x02\x02' +
    '\x91\x92\x07)\x02\x02\x92\f\x03\x02\x02\x02\x93\x94\x07a\x02\x02\x94\x0E' +
    '\x03\x02\x02\x02\x95\x96\x07#\x02\x02\x96\x10\x03\x02\x02\x02\x97\x98' +
    "\x07'\x02\x02\x98\x12\x03\x02\x02\x02\x99\x9A\x07(\x02\x02\x9A\x14\x03" +
    '\x02\x02\x02\x9B\x9C\x07&\x02\x02\x9C\x16\x03\x02\x02\x02\x9D\x9E\x07' +
    '%\x02\x02\x9E\x18\x03\x02\x02\x02\x9F\xA0\x07-\x02\x02\xA0\x1A\x03\x02' +
    '\x02\x02\xA1\xA2\x07/\x02\x02\xA2\x1C\x03\x02\x02\x02\xA3\xA4\x071\x02' +
    '\x02\xA4\x1E\x03\x02\x02\x02\xA5\xA6\x07<\x02\x02\xA6 \x03\x02\x02\x02' +
    '\xA7\xA8\x07>\x02\x02\xA8"\x03\x02\x02\x02\xA9\xAA\x07@\x02\x02\xAA$' +
    '\x03\x02\x02\x02\xAB\xAC\x07A\x02\x02\xAC&\x03\x02\x02\x02\xAD\xAE\x07' +
    'B\x02\x02\xAE(\x03\x02\x02\x02\xAF\xB0\x07^\x02\x02\xB0*\x03\x02\x02\x02' +
    '\xB1\xB2\x07\x80\x02\x02\xB2,\x03\x02\x02\x02\xB3\xB4\x07`\x02\x02\xB4' +
    '.\x03\x02\x02\x02\xB5\xB6\x07~\x02\x02\xB60\x03\x02\x02\x02\xB7\xB8\x07' +
    ',\x02\x02\xB82\x03\x02\x02\x02\xB9\xBA\x07%\x02\x02\xBA\xBB\x07$\x02\x02' +
    '\xBB\xBF\x03\x02\x02\x02\xBC\xC0\x05\x87D\x02\xBD\xC0\x05\x81A\x02\xBE' +
    '\xC0\x05\x83B\x02\xBF\xBC\x03\x02\x02\x02\xBF\xBD\x03\x02\x02\x02\xBF' +
    '\xBE\x03\x02\x02\x02\xC0\xC1\x03\x02\x02\x02\xC1\xC2\x07$\x02\x02\xC2' +
    '4\x03\x02\x02\x02\xC3\xC9\x07$\x02\x02\xC4\xC8\x05\x87D\x02\xC5\xC8\x05' +
    '\x81A\x02\xC6\xC8\x05\x83B\x02\xC7\xC4\x03\x02\x02\x02\xC7\xC5\x03\x02' +
    '\x02\x02\xC7\xC6\x03\x02\x02\x02\xC8\xCB\x03\x02\x02\x02\xC9\xC7\x03\x02' +
    '\x02\x02\xC9\xCA\x03\x02\x02\x02\xCA\xCC\x03\x02\x02\x02\xCB\xC9\x03\x02' +
    '\x02\x02\xCC\xCD\x07$\x02\x02\xCD6\x03\x02\x02\x02\xCE\xD1\x05}?\x02\xCF' +
    '\xD1\x05\x7F@\x02\xD0\xCE\x03\x02\x02\x02\xD0\xCF\x03\x02\x02\x02\xD1' +
    '8\x03\x02\x02\x02\xD2\xD4\x05\x81A\x02\xD3\xD2\x03\x02\x02\x02\xD4\xD5' +
    '\x03\x02\x02\x02\xD5\xD3\x03\x02\x02\x02\xD5\xD6\x03\x02\x02\x02\xD6\xD7' +
    '\x03\x02\x02\x02\xD7\xD9\x070\x02\x02\xD8\xDA\x05\x81A\x02\xD9\xD8\x03' +
    '\x02\x02\x02\xDA\xDB\x03\x02\x02\x02\xDB\xD9\x03\x02\x02\x02\xDB\xDC\x03' +
    '\x02\x02\x02\xDC:\x03\x02\x02\x02\xDD\xDF\x05\x81A\x02\xDE\xDD\x03\x02' +
    '\x02\x02\xDF\xE0\x03\x02\x02\x02\xE0\xDE\x03\x02\x02\x02\xE0\xE1\x03\x02' +
    '\x02\x02\xE1<\x03\x02\x02\x02\xE2\xE3\x07c\x02\x02\xE3\xE4\x07d\x02\x02' +
    '\xE4\xE5\x07u\x02\x02\xE5\xE6\x07v\x02\x02\xE6\xE7\x07{\x02\x02\xE7\xE8' +
    '\x07r\x02\x02\xE8\xE9\x07g\x02\x02\xE9>\x03\x02\x02\x02\xEA\xEB\x07c\x02' +
    '\x02\xEB\xEC\x07p\x02\x02\xEC\xED\x07f\x02\x02\xED@\x03\x02\x02\x02\xEE' +
    '\xEF\x07c\x02\x02\xEF\xF0\x07p\x02\x02\xF0\xF1\x07f\x02\x02\xF1\xF2\x07' +
    'c\x02\x02\xF2\xF3\x07n\x02\x02\xF3\xF4\x07u\x02\x02\xF4\xF5\x07q\x02\x02' +
    '\xF5B\x03\x02\x02\x02\xF6\xF7\x07c\x02\x02\xF7\xF8\x07u\x02\x02\xF8D\x03' +
    '\x02\x02\x02\xF9\xFA\x07e\x02\x02\xFA\xFB\x07c\x02\x02\xFB\xFC\x07u\x02' +
    '\x02\xFC\xFD\x07g\x02\x02\xFDF\x03\x02\x02\x02\xFE\xFF\x07f\x02\x02\xFF' +
    '\u0100\x07c\x02\x02\u0100\u0101\x07v\x02\x02\u0101\u0102\x07c\x02\x02' +
    '\u0102\u0103\x07v\x02\x02\u0103\u0104\x07{\x02\x02\u0104\u0105\x07r\x02' +
    '\x02\u0105\u0106\x07g\x02\x02\u0106H\x03\x02\x02\x02\u0107\u0108\x07f' +
    '\x02\x02\u0108\u0109\x07q\x02\x02\u0109J\x03\x02\x02\x02\u010A\u010B\x07' +
    'g\x02\x02\u010B\u010C\x07n\x02\x02\u010C\u010D\x07u\x02\x02\u010D\u010E' +
    '\x07g\x02\x02\u010EL\x03\x02\x02\x02\u010F\u0110\x07g\x02\x02\u0110\u0111' +
    '\x07p\x02\x02\u0111\u0112\x07f\x02\x02\u0112N\x03\x02\x02\x02\u0113\u0114' +
    '\x07g\x02\x02\u0114\u0115\x07z\x02\x02\u0115\u0116\x07e\x02\x02\u0116' +
    '\u0117\x07g\x02\x02\u0117\u0118\x07r\x02\x02\u0118\u0119\x07v\x02\x02' +
    '\u0119\u011A\x07k\x02\x02\u011A\u011B\x07q\x02\x02\u011B\u011C\x07p\x02' +
    '\x02\u011CP\x03\x02\x02\x02\u011D\u011E\x07h\x02\x02\u011E\u011F\x07p' +
    '\x02\x02\u011FR\x03\x02\x02\x02\u0120\u0121\x07h\x02\x02\u0121\u0122\x07' +
    'w\x02\x02\u0122\u0123\x07p\x02\x02\u0123T\x03\x02\x02\x02\u0124\u0125' +
    '\x07j\x02\x02\u0125\u0126\x07c\x02\x02\u0126\u0127\x07p\x02\x02\u0127' +
    '\u0128\x07f\x02\x02\u0128\u0129\x07n\x02\x02\u0129\u012A\x07g\x02\x02' +
    '\u012AV\x03\x02\x02\x02\u012B\u012C\x07k\x02\x02\u012C\u012D\x07h\x02' +
    '\x02\u012DX\x03\x02\x02\x02\u012E\u012F\x07k\x02\x02\u012F\u0130\x07p' +
    '\x02\x02\u0130Z\x03\x02\x02\x02\u0131\u0132\x07k\x02\x02\u0132\u0133\x07' +
    'p\x02\x02\u0133\u0134\x07h\x02\x02\u0134\u0135\x07k\x02\x02\u0135\u0136' +
    '\x07z\x02\x02\u0136\\\x03\x02\x02\x02\u0137\u0138\x07k\x02\x02\u0138\u0139' +
    '\x07p\x02\x02\u0139\u013A\x07h\x02\x02\u013A\u013B\x07k\x02\x02\u013B' +
    '\u013C\x07z\x02\x02\u013C\u013D\x07t\x02\x02\u013D^\x03\x02\x02\x02\u013E' +
    '\u013F\x07n\x02\x02\u013F\u0140\x07g\x02\x02\u0140\u0141\x07v\x02\x02' +
    '\u0141`\x03\x02\x02\x02\u0142\u0143\x07n\x02\x02\u0143\u0144\x07q\x02' +
    '\x02\u0144\u0145\x07e\x02\x02\u0145\u0146\x07c\x02\x02\u0146\u0147\x07' +
    'n\x02\x02\u0147b\x03\x02\x02\x02\u0148\u0149\x07p\x02\x02\u0149\u014A' +
    '\x07q\x02\x02\u014A\u014B\x07p\x02\x02\u014B\u014C\x07h\x02\x02\u014C' +
    '\u014D\x07k\x02\x02\u014D\u014E\x07z\x02\x02\u014Ed\x03\x02\x02\x02\u014F' +
    '\u0150\x07q\x02\x02\u0150\u0151\x07h\x02\x02\u0151f\x03\x02\x02\x02\u0152' +
    '\u0153\x07q\x02\x02\u0153\u0154\x07r\x02\x02\u0154h\x03\x02\x02\x02\u0155' +
    '\u0156\x07q\x02\x02\u0156\u0157\x07r\x02\x02\u0157\u0158\x07g\x02\x02' +
    '\u0158\u0159\x07p\x02\x02\u0159j\x03\x02\x02\x02\u015A\u015B\x07q\x02' +
    '\x02\u015B\u015C\x07t\x02\x02\u015C\u015D\x07g\x02\x02\u015D\u015E\x07' +
    'n\x02\x02\u015E\u015F\x07u\x02\x02\u015F\u0160\x07g\x02\x02\u0160l\x03' +
    '\x02\x02\x02\u0161\u0162\x07t\x02\x02\u0162\u0163\x07c\x02\x02\u0163\u0164' +
    '\x07k\x02\x02\u0164\u0165\x07u\x02\x02\u0165\u0166\x07g\x02\x02\u0166' +
    'n\x03\x02\x02\x02\u0167\u0168\x07t\x02\x02\u0168\u0169\x07g\x02\x02\u0169' +
    '\u016A\x07e\x02\x02\u016Ap\x03\x02\x02\x02\u016B\u016C\x07v\x02\x02\u016C' +
    '\u016D\x07j\x02\x02\u016D\u016E\x07g\x02\x02\u016E\u016F\x07p\x02\x02' +
    '\u016Fr\x03\x02\x02\x02\u0170\u0171\x07v\x02\x02\u0171\u0172\x07{\x02' +
    '\x02\u0172\u0173\x07r\x02\x02\u0173\u0174\x07g\x02\x02\u0174t\x03\x02' +
    '\x02\x02\u0175\u0176\x07x\x02\x02\u0176\u0177\x07c\x02\x02\u0177\u0178' +
    '\x07n\x02\x02\u0178v\x03\x02\x02\x02\u0179\u017A\x07y\x02\x02\u017A\u017B' +
    '\x07k\x02\x02\u017B\u017C\x07v\x02\x02\u017C\u017D\x07j\x02\x02\u017D' +
    'x\x03\x02\x02\x02\u017E\u017F\x07y\x02\x02\u017F\u0180\x07k\x02\x02\u0180' +
    '\u0181\x07v\x02\x02\u0181\u0182\x07j\x02\x02\u0182\u0183\x07v\x02\x02' +
    '\u0183\u0184\x07{\x02\x02\u0184\u0185\x07r\x02\x02\u0185\u0186\x07g\x02' +
    '\x02\u0186z\x03\x02\x02\x02\u0187\u0188\x07y\x02\x02\u0188\u0189\x07j' +
    '\x02\x02\u0189\u018A\x07k\x02\x02\u018A\u018B\x07n\x02\x02\u018B\u018C' +
    '\x07g\x02\x02\u018C|\x03\x02\x02\x02\u018D\u018E\x07v\x02\x02\u018E\u018F' +
    '\x07t\x02\x02\u018F\u0190\x07w\x02\x02\u0190\u0191\x07g\x02\x02\u0191' +
    '~\x03\x02\x02\x02\u0192\u0193\x07h\x02\x02\u0193\u0194\x07c\x02\x02\u0194' +
    '\u0195\x07n\x02\x02\u0195\u0196\x07u\x02\x02\u0196\u0197\x07g\x02\x02' +
    '\u0197\x80\x03\x02\x02\x02\u0198\u0199\t\x02\x02\x02\u0199\x82\x03\x02' +
    '\x02\x02\u019A\u019B\t\x03\x02\x02\u019B\x84\x03\x02\x02\x02\u019C\u019E' +
    '\x07\x0F\x02\x02\u019D\u019C\x03\x02\x02\x02\u019D\u019E\x03\x02\x02\x02' +
    '\u019E\u019F\x03\x02\x02\x02\u019F\u01A2\x07\f\x02\x02\u01A0\u01A2\x07' +
    '\x0F\x02\x02\u01A1\u019D\x03\x02\x02\x02\u01A1\u01A0\x03\x02\x02\x02\u01A2' +
    '\x86\x03\x02\x02\x02\u01A3\u01A5\t\x04\x02\x02\u01A4\u01A3\x03\x02\x02' +
    '\x02\u01A5\u01A6\x03\x02\x02\x02\u01A6\u01A4\x03\x02\x02\x02\u01A6\u01A7' +
    '\x03\x02\x02\x02\u01A7\u01A8\x03\x02\x02\x02\u01A8\u01A9\bD\x02\x02\u01A9' +
    '\x88\x03\x02\x02\x02\r\x02\xBF\xC7\xC9\xD0\xD5\xDB\xE0\u019D\u01A1\u01A6' +
    '\x03\b\x02\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!smlLexer.__ATN) {
      smlLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(smlLexer._serializedATN))
    }

    return smlLexer.__ATN
  }
}
