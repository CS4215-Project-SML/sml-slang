// Generated from ./src/lang/sml.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { CharStream } from 'antlr4ts/CharStream'
import { NotNull } from 'antlr4ts/Decorators'
import { Override } from 'antlr4ts/Decorators'
import { Lexer } from 'antlr4ts/Lexer'
import * as Utils from 'antlr4ts/misc/Utils'
import { RuleContext } from 'antlr4ts/RuleContext'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

export class smlLexer extends Lexer {
  public static readonly T__0 = 1
  public static readonly T__1 = 2
  public static readonly T__2 = 3
  public static readonly T__3 = 4
  public static readonly T__4 = 5
  public static readonly T__5 = 6
  public static readonly T__6 = 7
  public static readonly T__7 = 8
  public static readonly T__8 = 9
  public static readonly T__9 = 10
  public static readonly T__10 = 11
  public static readonly T__11 = 12
  public static readonly T__12 = 13
  public static readonly T__13 = 14
  public static readonly T__14 = 15
  public static readonly T__15 = 16
  public static readonly T__16 = 17
  public static readonly T__17 = 18
  public static readonly T__18 = 19
  public static readonly T__19 = 20
  public static readonly T__20 = 21
  public static readonly T__21 = 22
  public static readonly T__22 = 23
  public static readonly T__23 = 24
  public static readonly T__24 = 25
  public static readonly T__25 = 26
  public static readonly T__26 = 27
  public static readonly CHAR = 28
  public static readonly STR = 29
  public static readonly BOOL = 30
  public static readonly REAL = 31
  public static readonly INT = 32
  public static readonly ABSTYPE = 33
  public static readonly AND = 34
  public static readonly ANDALSO = 35
  public static readonly AS = 36
  public static readonly CASE = 37
  public static readonly DATATYPE = 38
  public static readonly DO = 39
  public static readonly ELSE = 40
  public static readonly END = 41
  public static readonly EXCEPTION = 42
  public static readonly FN = 43
  public static readonly FUN = 44
  public static readonly HANDLE = 45
  public static readonly IF = 46
  public static readonly IN = 47
  public static readonly INFIX = 48
  public static readonly INFIXR = 49
  public static readonly LET = 50
  public static readonly LOCAL = 51
  public static readonly NONFIX = 52
  public static readonly OF = 53
  public static readonly OP = 54
  public static readonly OPEN = 55
  public static readonly ORELSE = 56
  public static readonly RAISE = 57
  public static readonly REC = 58
  public static readonly THEN = 59
  public static readonly TYPE = 60
  public static readonly VAL = 61
  public static readonly WITH = 62
  public static readonly WITHTYPE = 63
  public static readonly WHILE = 64
  public static readonly TRUE = 65
  public static readonly FALSE = 66
  public static readonly DIGIT = 67
  public static readonly LETTER = 68
  public static readonly NEWLINE = 69
  public static readonly WHITESPACE = 70

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'T__6',
    'T__7',
    'T__8',
    'T__9',
    'T__10',
    'T__11',
    'T__12',
    'T__13',
    'T__14',
    'T__15',
    'T__16',
    'T__17',
    'T__18',
    'T__19',
    'T__20',
    'T__21',
    'T__22',
    'T__23',
    'T__24',
    'T__25',
    'T__26',
    'CHAR',
    'STR',
    'BOOL',
    'REAL',
    'INT',
    'ABSTYPE',
    'AND',
    'ANDALSO',
    'AS',
    'CASE',
    'DATATYPE',
    'DO',
    'ELSE',
    'END',
    'EXCEPTION',
    'FN',
    'FUN',
    'HANDLE',
    'IF',
    'IN',
    'INFIX',
    'INFIXR',
    'LET',
    'LOCAL',
    'NONFIX',
    'OF',
    'OP',
    'OPEN',
    'ORELSE',
    'RAISE',
    'REC',
    'THEN',
    'TYPE',
    'VAL',
    'WITH',
    'WITHTYPE',
    'WHILE',
    'TRUE',
    'FALSE',
    'DIGIT',
    'LETTER',
    'NEWLINE',
    'WHITESPACE'
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "';'",
    "'='",
    "'('",
    "')'",
    "'{'",
    "','",
    "'}'",
    "'#'",
    "'''",
    "'_'",
    "'!'",
    "'%'",
    "'&'",
    "'$'",
    "'+'",
    "'-'",
    "'/'",
    "':'",
    "'<'",
    "'>'",
    "'?'",
    "'@'",
    "'\\'",
    "'~'",
    "'^'",
    "'|'",
    "'*'",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "'abstype'",
    "'and'",
    "'andalso'",
    "'as'",
    "'case'",
    "'datatype'",
    "'do'",
    "'else'",
    "'end'",
    "'exception'",
    "'fn'",
    "'fun'",
    "'handle'",
    "'if'",
    "'in'",
    "'infix'",
    "'infixr'",
    "'let'",
    "'local'",
    "'nonfix'",
    "'of'",
    "'op'",
    "'open'",
    "'orelse'",
    "'raise'",
    "'rec'",
    "'then'",
    "'type'",
    "'val'",
    "'with'",
    "'withtype'",
    "'while'",
    "'true'",
    "'false'"
  ]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    'CHAR',
    'STR',
    'BOOL',
    'REAL',
    'INT',
    'ABSTYPE',
    'AND',
    'ANDALSO',
    'AS',
    'CASE',
    'DATATYPE',
    'DO',
    'ELSE',
    'END',
    'EXCEPTION',
    'FN',
    'FUN',
    'HANDLE',
    'IF',
    'IN',
    'INFIX',
    'INFIXR',
    'LET',
    'LOCAL',
    'NONFIX',
    'OF',
    'OP',
    'OPEN',
    'ORELSE',
    'RAISE',
    'REC',
    'THEN',
    'TYPE',
    'VAL',
    'WITH',
    'WITHTYPE',
    'WHILE',
    'TRUE',
    'FALSE',
    'DIGIT',
    'LETTER',
    'NEWLINE',
    'WHITESPACE'
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    smlLexer._LITERAL_NAMES,
    smlLexer._SYMBOLIC_NAMES,
    []
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return smlLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(smlLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'sml.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return smlLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return smlLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return smlLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return smlLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02H\u01B6\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    "\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04" +
    '+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04' +
    '4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04' +
    '=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04' +
    'F\tF\x04G\tG\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03' +
    '\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03' +
    '\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F' +
    '\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14' +
    '\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18' +
    '\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D' +
    '\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\xCC\n\x1D\x03\x1D\x03' +
    '\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07\x1E\xD4\n\x1E\f\x1E\x0E\x1E\xD7' +
    '\v\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x05\x1F\xDD\n\x1F\x03 \x06 \xE0' +
    '\n \r \x0E \xE1\x03 \x03 \x06 \xE6\n \r \x0E \xE7\x03!\x06!\xEB\n!\r!' +
    '\x0E!\xEC\x03"\x03"\x03"\x03"\x03"\x03"\x03"\x03"\x03#\x03#\x03' +
    '#\x03#\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03%\x03%\x03%\x03&\x03' +
    "&\x03&\x03&\x03&\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03'" +
    '\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x03*\x03*\x03*\x03*\x03+\x03' +
    '+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03,\x03,\x03,\x03-\x03-\x03' +
    '-\x03-\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03/\x03/\x03/\x030\x030\x03' +
    '0\x031\x031\x031\x031\x031\x031\x032\x032\x032\x032\x032\x032\x032\x03' +
    '3\x033\x033\x033\x034\x034\x034\x034\x034\x034\x035\x035\x035\x035\x03' +
    '5\x035\x035\x036\x036\x036\x037\x037\x037\x038\x038\x038\x038\x038\x03' +
    '9\x039\x039\x039\x039\x039\x039\x03:\x03:\x03:\x03:\x03:\x03:\x03;\x03' +
    ';\x03;\x03;\x03<\x03<\x03<\x03<\x03<\x03=\x03=\x03=\x03=\x03=\x03>\x03' +
    '>\x03>\x03>\x03?\x03?\x03?\x03?\x03?\x03@\x03@\x03@\x03@\x03@\x03@\x03' +
    '@\x03@\x03@\x03A\x03A\x03A\x03A\x03A\x03A\x03B\x03B\x03B\x03B\x03B\x03' +
    'C\x03C\x03C\x03C\x03C\x03C\x03D\x03D\x03E\x03E\x03F\x05F\u01AA\nF\x03' +
    'F\x03F\x05F\u01AE\nF\x03G\x06G\u01B1\nG\rG\x0EG\u01B2\x03G\x03G\x02\x02' +
    '\x02H\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b' +
    '\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02' +
    "\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02" +
    '\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02' +
    '\x1E;\x02\x1F=\x02 ?\x02!A\x02"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(' +
    'O\x02)Q\x02*S\x02+U\x02,W\x02-Y\x02.[\x02/]\x020_\x021a\x022c\x023e\x02' +
    '4g\x025i\x026k\x027m\x028o\x029q\x02:s\x02;u\x02<w\x02=y\x02>{\x02?}\x02' +
    '@\x7F\x02A\x81\x02B\x83\x02C\x85\x02D\x87\x02E\x89\x02F\x8B\x02G\x8D\x02' +
    'H\x03\x02\x05\x03\x022;\x04\x02C\\c|\x04\x02\v\v""\x02\u01C1\x02\x03' +
    '\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t' +
    '\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03' +
    '\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03' +
    '\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03' +
    '\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03' +
    "\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02" +
    '\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02' +
    '/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02' +
    '\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02' +
    '\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03' +
    '\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02' +
    '\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02' +
    'Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02' +
    '\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02' +
    '\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03' +
    '\x02\x02\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02\x02\x02k\x03\x02\x02' +
    '\x02\x02m\x03\x02\x02\x02\x02o\x03\x02\x02\x02\x02q\x03\x02\x02\x02\x02' +
    's\x03\x02\x02\x02\x02u\x03\x02\x02\x02\x02w\x03\x02\x02\x02\x02y\x03\x02' +
    '\x02\x02\x02{\x03\x02\x02\x02\x02}\x03\x02\x02\x02\x02\x7F\x03\x02\x02' +
    '\x02\x02\x81\x03\x02\x02\x02\x02\x83\x03\x02\x02\x02\x02\x85\x03\x02\x02' +
    '\x02\x02\x87\x03\x02\x02\x02\x02\x89\x03\x02\x02\x02\x02\x8B\x03\x02\x02' +
    '\x02\x02\x8D\x03\x02\x02\x02\x03\x8F\x03\x02\x02\x02\x05\x91\x03\x02\x02' +
    '\x02\x07\x93\x03\x02\x02\x02\t\x95\x03\x02\x02\x02\v\x97\x03\x02\x02\x02' +
    '\r\x99\x03\x02\x02\x02\x0F\x9B\x03\x02\x02\x02\x11\x9D\x03\x02\x02\x02' +
    '\x13\x9F\x03\x02\x02\x02\x15\xA1\x03\x02\x02\x02\x17\xA3\x03\x02\x02\x02' +
    '\x19\xA5\x03\x02\x02\x02\x1B\xA7\x03\x02\x02\x02\x1D\xA9\x03\x02\x02\x02' +
    '\x1F\xAB\x03\x02\x02\x02!\xAD\x03\x02\x02\x02#\xAF\x03\x02\x02\x02%\xB1' +
    "\x03\x02\x02\x02'\xB3\x03\x02\x02\x02)\xB5\x03\x02\x02\x02+\xB7\x03\x02" +
    '\x02\x02-\xB9\x03\x02\x02\x02/\xBB\x03\x02\x02\x021\xBD\x03\x02\x02\x02' +
    '3\xBF\x03\x02\x02\x025\xC1\x03\x02\x02\x027\xC3\x03\x02\x02\x029\xC5\x03' +
    '\x02\x02\x02;\xCF\x03\x02\x02\x02=\xDC\x03\x02\x02\x02?\xDF\x03\x02\x02' +
    '\x02A\xEA\x03\x02\x02\x02C\xEE\x03\x02\x02\x02E\xF6\x03\x02\x02\x02G\xFA' +
    '\x03\x02\x02\x02I\u0102\x03\x02\x02\x02K\u0105\x03\x02\x02\x02M\u010A' +
    '\x03\x02\x02\x02O\u0113\x03\x02\x02\x02Q\u0116\x03\x02\x02\x02S\u011B' +
    '\x03\x02\x02\x02U\u011F\x03\x02\x02\x02W\u0129\x03\x02\x02\x02Y\u012C' +
    '\x03\x02\x02\x02[\u0130\x03\x02\x02\x02]\u0137\x03\x02\x02\x02_\u013A' +
    '\x03\x02\x02\x02a\u013D\x03\x02\x02\x02c\u0143\x03\x02\x02\x02e\u014A' +
    '\x03\x02\x02\x02g\u014E\x03\x02\x02\x02i\u0154\x03\x02\x02\x02k\u015B' +
    '\x03\x02\x02\x02m\u015E\x03\x02\x02\x02o\u0161\x03\x02\x02\x02q\u0166' +
    '\x03\x02\x02\x02s\u016D\x03\x02\x02\x02u\u0173\x03\x02\x02\x02w\u0177' +
    '\x03\x02\x02\x02y\u017C\x03\x02\x02\x02{\u0181\x03\x02\x02\x02}\u0185' +
    '\x03\x02\x02\x02\x7F\u018A\x03\x02\x02\x02\x81\u0193\x03\x02\x02\x02\x83' +
    '\u0199\x03\x02\x02\x02\x85\u019E\x03\x02\x02\x02\x87\u01A4\x03\x02\x02' +
    '\x02\x89\u01A6\x03\x02\x02\x02\x8B\u01AD\x03\x02\x02\x02\x8D\u01B0\x03' +
    '\x02\x02\x02\x8F\x90\x07=\x02\x02\x90\x04\x03\x02\x02\x02\x91\x92\x07' +
    '?\x02\x02\x92\x06\x03\x02\x02\x02\x93\x94\x07*\x02\x02\x94\b\x03\x02\x02' +
    '\x02\x95\x96\x07+\x02\x02\x96\n\x03\x02\x02\x02\x97\x98\x07}\x02\x02\x98' +
    '\f\x03\x02\x02\x02\x99\x9A\x07.\x02\x02\x9A\x0E\x03\x02\x02\x02\x9B\x9C' +
    '\x07\x7F\x02\x02\x9C\x10\x03\x02\x02\x02\x9D\x9E\x07%\x02\x02\x9E\x12' +
    '\x03\x02\x02\x02\x9F\xA0\x07)\x02\x02\xA0\x14\x03\x02\x02\x02\xA1\xA2' +
    '\x07a\x02\x02\xA2\x16\x03\x02\x02\x02\xA3\xA4\x07#\x02\x02\xA4\x18\x03' +
    "\x02\x02\x02\xA5\xA6\x07'\x02\x02\xA6\x1A\x03\x02\x02\x02\xA7\xA8\x07" +
    '(\x02\x02\xA8\x1C\x03\x02\x02\x02\xA9\xAA\x07&\x02\x02\xAA\x1E\x03\x02' +
    '\x02\x02\xAB\xAC\x07-\x02\x02\xAC \x03\x02\x02\x02\xAD\xAE\x07/\x02\x02' +
    '\xAE"\x03\x02\x02\x02\xAF\xB0\x071\x02\x02\xB0$\x03\x02\x02\x02\xB1\xB2' +
    '\x07<\x02\x02\xB2&\x03\x02\x02\x02\xB3\xB4\x07>\x02\x02\xB4(\x03\x02\x02' +
    '\x02\xB5\xB6\x07@\x02\x02\xB6*\x03\x02\x02\x02\xB7\xB8\x07A\x02\x02\xB8' +
    ',\x03\x02\x02\x02\xB9\xBA\x07B\x02\x02\xBA.\x03\x02\x02\x02\xBB\xBC\x07' +
    '^\x02\x02\xBC0\x03\x02\x02\x02\xBD\xBE\x07\x80\x02\x02\xBE2\x03\x02\x02' +
    '\x02\xBF\xC0\x07`\x02\x02\xC04\x03\x02\x02\x02\xC1\xC2\x07~\x02\x02\xC2' +
    '6\x03\x02\x02\x02\xC3\xC4\x07,\x02\x02\xC48\x03\x02\x02\x02\xC5\xC6\x07' +
    '%\x02\x02\xC6\xC7\x07$\x02\x02\xC7\xCB\x03\x02\x02\x02\xC8\xCC\x05\x8D' +
    'G\x02\xC9\xCC\x05\x87D\x02\xCA\xCC\x05\x89E\x02\xCB\xC8\x03\x02\x02\x02' +
    '\xCB\xC9\x03\x02\x02\x02\xCB\xCA\x03\x02\x02\x02\xCC\xCD\x03\x02\x02\x02' +
    '\xCD\xCE\x07$\x02\x02\xCE:\x03\x02\x02\x02\xCF\xD5\x07$\x02\x02\xD0\xD4' +
    '\x05\x8DG\x02\xD1\xD4\x05\x87D\x02\xD2\xD4\x05\x89E\x02\xD3\xD0\x03\x02' +
    '\x02\x02\xD3\xD1\x03\x02\x02\x02\xD3\xD2\x03\x02\x02\x02\xD4\xD7\x03\x02' +
    '\x02\x02\xD5\xD3\x03\x02\x02\x02\xD5\xD6\x03\x02\x02\x02\xD6\xD8\x03\x02' +
    '\x02\x02\xD7\xD5\x03\x02\x02\x02\xD8\xD9\x07$\x02\x02\xD9<\x03\x02\x02' +
    '\x02\xDA\xDD\x05\x83B\x02\xDB\xDD\x05\x85C\x02\xDC\xDA\x03\x02\x02\x02' +
    '\xDC\xDB\x03\x02\x02\x02\xDD>\x03\x02\x02\x02\xDE\xE0\x05\x87D\x02\xDF' +
    '\xDE\x03\x02\x02\x02\xE0\xE1\x03\x02\x02\x02\xE1\xDF\x03\x02\x02\x02\xE1' +
    '\xE2\x03\x02\x02\x02\xE2\xE3\x03\x02\x02\x02\xE3\xE5\x070\x02\x02\xE4' +
    '\xE6\x05\x87D\x02\xE5\xE4\x03\x02\x02\x02\xE6\xE7\x03\x02\x02\x02\xE7' +
    '\xE5\x03\x02\x02\x02\xE7\xE8\x03\x02\x02\x02\xE8@\x03\x02\x02\x02\xE9' +
    '\xEB\x05\x87D\x02\xEA\xE9\x03\x02\x02\x02\xEB\xEC\x03\x02\x02\x02\xEC' +
    '\xEA\x03\x02\x02\x02\xEC\xED\x03\x02\x02\x02\xEDB\x03\x02\x02\x02\xEE' +
    '\xEF\x07c\x02\x02\xEF\xF0\x07d\x02\x02\xF0\xF1\x07u\x02\x02\xF1\xF2\x07' +
    'v\x02\x02\xF2\xF3\x07{\x02\x02\xF3\xF4\x07r\x02\x02\xF4\xF5\x07g\x02\x02' +
    '\xF5D\x03\x02\x02\x02\xF6\xF7\x07c\x02\x02\xF7\xF8\x07p\x02\x02\xF8\xF9' +
    '\x07f\x02\x02\xF9F\x03\x02\x02\x02\xFA\xFB\x07c\x02\x02\xFB\xFC\x07p\x02' +
    '\x02\xFC\xFD\x07f\x02\x02\xFD\xFE\x07c\x02\x02\xFE\xFF\x07n\x02\x02\xFF' +
    '\u0100\x07u\x02\x02\u0100\u0101\x07q\x02\x02\u0101H\x03\x02\x02\x02\u0102' +
    '\u0103\x07c\x02\x02\u0103\u0104\x07u\x02\x02\u0104J\x03\x02\x02\x02\u0105' +
    '\u0106\x07e\x02\x02\u0106\u0107\x07c\x02\x02\u0107\u0108\x07u\x02\x02' +
    '\u0108\u0109\x07g\x02\x02\u0109L\x03\x02\x02\x02\u010A\u010B\x07f\x02' +
    '\x02\u010B\u010C\x07c\x02\x02\u010C\u010D\x07v\x02\x02\u010D\u010E\x07' +
    'c\x02\x02\u010E\u010F\x07v\x02\x02\u010F\u0110\x07{\x02\x02\u0110\u0111' +
    '\x07r\x02\x02\u0111\u0112\x07g\x02\x02\u0112N\x03\x02\x02\x02\u0113\u0114' +
    '\x07f\x02\x02\u0114\u0115\x07q\x02\x02\u0115P\x03\x02\x02\x02\u0116\u0117' +
    '\x07g\x02\x02\u0117\u0118\x07n\x02\x02\u0118\u0119\x07u\x02\x02\u0119' +
    '\u011A\x07g\x02\x02\u011AR\x03\x02\x02\x02\u011B\u011C\x07g\x02\x02\u011C' +
    '\u011D\x07p\x02\x02\u011D\u011E\x07f\x02\x02\u011ET\x03\x02\x02\x02\u011F' +
    '\u0120\x07g\x02\x02\u0120\u0121\x07z\x02\x02\u0121\u0122\x07e\x02\x02' +
    '\u0122\u0123\x07g\x02\x02\u0123\u0124\x07r\x02\x02\u0124\u0125\x07v\x02' +
    '\x02\u0125\u0126\x07k\x02\x02\u0126\u0127\x07q\x02\x02\u0127\u0128\x07' +
    'p\x02\x02\u0128V\x03\x02\x02\x02\u0129\u012A\x07h\x02\x02\u012A\u012B' +
    '\x07p\x02\x02\u012BX\x03\x02\x02\x02\u012C\u012D\x07h\x02\x02\u012D\u012E' +
    '\x07w\x02\x02\u012E\u012F\x07p\x02\x02\u012FZ\x03\x02\x02\x02\u0130\u0131' +
    '\x07j\x02\x02\u0131\u0132\x07c\x02\x02\u0132\u0133\x07p\x02\x02\u0133' +
    '\u0134\x07f\x02\x02\u0134\u0135\x07n\x02\x02\u0135\u0136\x07g\x02\x02' +
    '\u0136\\\x03\x02\x02\x02\u0137\u0138\x07k\x02\x02\u0138\u0139\x07h\x02' +
    '\x02\u0139^\x03\x02\x02\x02\u013A\u013B\x07k\x02\x02\u013B\u013C\x07p' +
    '\x02\x02\u013C`\x03\x02\x02\x02\u013D\u013E\x07k\x02\x02\u013E\u013F\x07' +
    'p\x02\x02\u013F\u0140\x07h\x02\x02\u0140\u0141\x07k\x02\x02\u0141\u0142' +
    '\x07z\x02\x02\u0142b\x03\x02\x02\x02\u0143\u0144\x07k\x02\x02\u0144\u0145' +
    '\x07p\x02\x02\u0145\u0146\x07h\x02\x02\u0146\u0147\x07k\x02\x02\u0147' +
    '\u0148\x07z\x02\x02\u0148\u0149\x07t\x02\x02\u0149d\x03\x02\x02\x02\u014A' +
    '\u014B\x07n\x02\x02\u014B\u014C\x07g\x02\x02\u014C\u014D\x07v\x02\x02' +
    '\u014Df\x03\x02\x02\x02\u014E\u014F\x07n\x02\x02\u014F\u0150\x07q\x02' +
    '\x02\u0150\u0151\x07e\x02\x02\u0151\u0152\x07c\x02\x02\u0152\u0153\x07' +
    'n\x02\x02\u0153h\x03\x02\x02\x02\u0154\u0155\x07p\x02\x02\u0155\u0156' +
    '\x07q\x02\x02\u0156\u0157\x07p\x02\x02\u0157\u0158\x07h\x02\x02\u0158' +
    '\u0159\x07k\x02\x02\u0159\u015A\x07z\x02\x02\u015Aj\x03\x02\x02\x02\u015B' +
    '\u015C\x07q\x02\x02\u015C\u015D\x07h\x02\x02\u015Dl\x03\x02\x02\x02\u015E' +
    '\u015F\x07q\x02\x02\u015F\u0160\x07r\x02\x02\u0160n\x03\x02\x02\x02\u0161' +
    '\u0162\x07q\x02\x02\u0162\u0163\x07r\x02\x02\u0163\u0164\x07g\x02\x02' +
    '\u0164\u0165\x07p\x02\x02\u0165p\x03\x02\x02\x02\u0166\u0167\x07q\x02' +
    '\x02\u0167\u0168\x07t\x02\x02\u0168\u0169\x07g\x02\x02\u0169\u016A\x07' +
    'n\x02\x02\u016A\u016B\x07u\x02\x02\u016B\u016C\x07g\x02\x02\u016Cr\x03' +
    '\x02\x02\x02\u016D\u016E\x07t\x02\x02\u016E\u016F\x07c\x02\x02\u016F\u0170' +
    '\x07k\x02\x02\u0170\u0171\x07u\x02\x02\u0171\u0172\x07g\x02\x02\u0172' +
    't\x03\x02\x02\x02\u0173\u0174\x07t\x02\x02\u0174\u0175\x07g\x02\x02\u0175' +
    '\u0176\x07e\x02\x02\u0176v\x03\x02\x02\x02\u0177\u0178\x07v\x02\x02\u0178' +
    '\u0179\x07j\x02\x02\u0179\u017A\x07g\x02\x02\u017A\u017B\x07p\x02\x02' +
    '\u017Bx\x03\x02\x02\x02\u017C\u017D\x07v\x02\x02\u017D\u017E\x07{\x02' +
    '\x02\u017E\u017F\x07r\x02\x02\u017F\u0180\x07g\x02\x02\u0180z\x03\x02' +
    '\x02\x02\u0181\u0182\x07x\x02\x02\u0182\u0183\x07c\x02\x02\u0183\u0184' +
    '\x07n\x02\x02\u0184|\x03\x02\x02\x02\u0185\u0186\x07y\x02\x02\u0186\u0187' +
    '\x07k\x02\x02\u0187\u0188\x07v\x02\x02\u0188\u0189\x07j\x02\x02\u0189' +
    '~\x03\x02\x02\x02\u018A\u018B\x07y\x02\x02\u018B\u018C\x07k\x02\x02\u018C' +
    '\u018D\x07v\x02\x02\u018D\u018E\x07j\x02\x02\u018E\u018F\x07v\x02\x02' +
    '\u018F\u0190\x07{\x02\x02\u0190\u0191\x07r\x02\x02\u0191\u0192\x07g\x02' +
    '\x02\u0192\x80\x03\x02\x02\x02\u0193\u0194\x07y\x02\x02\u0194\u0195\x07' +
    'j\x02\x02\u0195\u0196\x07k\x02\x02\u0196\u0197\x07n\x02\x02\u0197\u0198' +
    '\x07g\x02\x02\u0198\x82\x03\x02\x02\x02\u0199\u019A\x07v\x02\x02\u019A' +
    '\u019B\x07t\x02\x02\u019B\u019C\x07w\x02\x02\u019C\u019D\x07g\x02\x02' +
    '\u019D\x84\x03\x02\x02\x02\u019E\u019F\x07h\x02\x02\u019F\u01A0\x07c\x02' +
    '\x02\u01A0\u01A1\x07n\x02\x02\u01A1\u01A2\x07u\x02\x02\u01A2\u01A3\x07' +
    'g\x02\x02\u01A3\x86\x03\x02\x02\x02\u01A4\u01A5\t\x02\x02\x02\u01A5\x88' +
    '\x03\x02\x02\x02\u01A6\u01A7\t\x03\x02\x02\u01A7\x8A\x03\x02\x02\x02\u01A8' +
    '\u01AA\x07\x0F\x02\x02\u01A9\u01A8\x03\x02\x02\x02\u01A9\u01AA\x03\x02' +
    '\x02\x02\u01AA\u01AB\x03\x02\x02\x02\u01AB\u01AE\x07\f\x02\x02\u01AC\u01AE' +
    '\x07\x0F\x02\x02\u01AD\u01A9\x03\x02\x02\x02\u01AD\u01AC\x03\x02\x02\x02' +
    '\u01AE\x8C\x03\x02\x02\x02\u01AF\u01B1\t\x04\x02\x02\u01B0\u01AF\x03\x02' +
    '\x02\x02\u01B1\u01B2\x03\x02\x02\x02\u01B2\u01B0\x03\x02\x02\x02\u01B2' +
    '\u01B3\x03\x02\x02\x02\u01B3\u01B4\x03\x02\x02\x02\u01B4\u01B5\bG\x02' +
    '\x02\u01B5\x8E\x03\x02\x02\x02\r\x02\xCB\xD3\xD5\xDC\xE1\xE7\xEC\u01A9' +
    '\u01AD\u01B2\x03\b\x02\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!smlLexer.__ATN) {
      smlLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(smlLexer._serializedATN))
    }

    return smlLexer.__ATN
  }
}
